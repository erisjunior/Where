generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  firstName String
  lastName  String
  telphone  String?  @unique
  email     String
  cpf       String?  @unique
  address   Address?
  addressId String?  @unique
  calls     Call[]
  store     Store?
  storeId   String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id            String   @id @default(cuid())
  street        String
  number        String
  complementary String
  zip           String
  city          City     @relation(fields: [cityId], references: [id])
  cityId        String
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model City {
  id        String    @id @default(cuid())
  name      String
  addresses Address[]
  state     State     @relation(fields: [stateId], references: [id])
  stateId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model State {
  id        String   @id @default(cuid())
  name      String
  initials  String
  cities    City[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  calls     Call[]
  stores    Store[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Store {
  id          String     @id @default(cuid())
  socialName  String     @unique
  fantasyName String
  cnpj        String     @unique
  answers     Answer[]
  image       Image?     @relation(fields: [imageId], references: [id])
  imageId     String     @unique
  user        User       @relation(fields: [userId], references: [id])
  userId      String     @unique
  categories  Category[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Call {
  id          String   @id @default(cuid())
  title       String
  description String
  answers     Answer[]
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  image       Image    @relation(fields: [imageId], references: [id])
  imageId     String   @unique
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Answer {
  id        String   @id @default(cuid())
  message   String
  call      Call     @relation(fields: [callId], references: [id])
  callId    String
  store     Store    @relation(fields: [storeId], references: [id])
  storeId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id        String   @id @default(cuid())
  image     String
  imageKey  String
  call      Call?
  callId    String?  @unique
  store     Store?
  storeId   String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
